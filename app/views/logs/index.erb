<% begin %>

  <% raise RuntimeError, "Tailog.log_path is not present!" unless Tailog.log_path %>

  <% 
    if params[:file] 
      file_path = File.join Tailog.log_path, params[:file]
    else
      file_path = Tailog.log_path
    end
    isDirectory = File.directory?(file_path)
    isFile = File.file?(file_path)
  %>

  <% if isFile %>
    <h3 class="page-header"><%= file_path %></h3>

    <% File.open file_path do |file| %>
      <div id="content" class="content content-hover"></div>
    <% end %>

    <script type="text/javascript">
      String.prototype.hashCode = function(){
        var hash = 0;
        if (this.length == 0) return "0000000";
        for (i = 0; i < this.length; i++) {
          char = this.charCodeAt(i);
          hash = ((hash<<5)-hash)+char;
          hash = hash & hash; // Convert to 32bit integer
        }
        return ("0000000" + (hash >>> 0).toString(16)).substr(-8);
      }

      var $settingsPanel = $("#settings-panel");
      $("#settings-toggle").click(function() {
        $settingsPanel.toggleClass("hidden");
      });

      var dividerId = 1;
      $("#add-divider").click(function() {
        $content.append('<span class="divider"> #' + dividerId++ + ' - ' + new Date() + '</span>');
      });

      $("#clear-logs").click(function() {
        $content.html('');
      });

      var $highlight = $("#highlight"),
          $highlightList = $("#highlight-list");

      function highlightClassname(keyword) {
        return 'highlight-' + keyword.hashCode();
      }

      function rawHighlight(keyword) {
        $content.highlight(keyword, { className: 'highlight ' + highlightClassname(keyword) });
      }

      function rawUnhighlight(keyword) {
        $content.unhighlight({ className: highlightClassname(keyword) });
      }

      var highlightColors = ['#FFFF88', '#FF88FF', '#88FFFF', '#CCCCFF', '#CCFFCC', '#FFCCCC'];
      function highlight(keyword) {
        var color = highlightColors[$highlightList.find("span").length % highlightColors.length];
        var classname = highlightClassname(keyword);

        if ($highlightList.find('.' + classname).length > 0) return;
        rawHighlight(keyword);
        $highlightList.append('<div class="label label-primary ' + classname + '"><span>' + keyword + '</span><em>&bull;</em></div>');

        $('body').append('<style>.highlight.' + classname + '{background-color:' + color + ';} .label.' + classname + '>em{color:' + color + ';}</style>');
      }

      $highlight.keypress(function(event) {
        if ((event.keyCode || event.which) === 13) {
          highlight($highlight.val());
        }
      });
      $("#add-highlight").click(function() {
        highlight($highlight.val());
      });

      $("#highlight-list").on("click", ".label", function(event) {
        var $this = $(this),
            keyword = $this.find('span').text();

        $this.hasClass('highlight-hidden') ? rawHighlight(keyword) : rawUnhighlight(keyword);
        $this.toggleClass('highlight-hidden');
      });

      window.fileSize = {};
      window.fileSizeDone = {};
      var $window = $(window),
          $document = $(document),
          $content = $("#content");
      function loadMore() {
        $.post(window.location.href, { seek: window.fileSize }, function(json) {
          try {
            var data = JSON.parse(json);
            var empty = !window.fileSize[data.server_hostname] && data.file_size === 0;

            var fileSizeKey = data.server_hostname + '-' + data.file_size;
            if (window.fileSizeDone[fileSizeKey]) return;
            window.fileSizeDone[fileSizeKey] = true;
            window.fileSize[data.server_hostname] = data.file_size;

            if (empty) {
              $content
                .append('<span class="text-info">' + data.server_hostname + ' - ' + data.file_size + '</span>')
                .append('<p><span class="text-danger">There is nothing in this file.</span></p>');
            }

            if (!data.content) return;
            var shouldScrollToBottom = $window.scrollTop() + $window.height() == $document.height();

            $content
              .append('<span class="text-info">' + data.server_hostname + ' - ' + data.file_size + '</span>')
              .append(ansi_up.ansi_to_html(data.content));

            $highlightList.find(".label").each(function(index, node) {
              var $node = $(node),
                  keyword = $node.find('span').text();
              $node.hasClass('highlight-hidden') || rawHighlight(keyword);
            });

            if (shouldScrollToBottom) {
              $window.scrollTop($document.height() - $window.height());
            }

          } catch (error) {
            console.log(error)
          }
        });
      }

      setInterval(loadMore, 3000);
      loadMore();
    </script>

  <% elsif isDirectory %>
    <table class="table table-striped table-hover">
      <thead>
        <tr>
          <th>File name</th>
          <th>Size</th>
          <th>Updated at</th>
        </tr>
      </thead>
      <tbody>
        <%
          tmpRecords = []
          Dir[File.join(file_path, "*")].each do |file|

            relative_file = Pathname.new(file).relative_path_from(Pathname.new(Tailog.log_path))
            stat = File.stat(file)

            isFile = File.file?(file)

            mtime = stat.mtime
            size = isFile ? stat.size : 0
            tmpRecords.push({relative_file: relative_file, mtime: mtime, size: size, is_file: isFile})
          end

          tmpRecords = tmpRecords.sort {|x, y| x[:mtime].to_i <=> y[:mtime].to_i }.reverse
        %>


        <% 
          tmpRecords.each do |record| 
            relative_file = record[:relative_file]
            size = record[:size]
            mtime = record[:mtime]
            is_file = record[:is_file]
        %>

          <tr>
            <td>
              <a href="?file=<%= relative_file %>"><%= relative_file %></a>
              <% if relative_file.to_s[-4, 4] == ".log" %>
              <a href="logs/download?file=<%= relative_file %>" download>
                <span class="glyphicon glyphicon-download-alt"></span>
              </a>
              <% end %>
            </td>
            <td>
              <%= is_file ? size : 0 %>
            </td>
            <td>
              <%= mtime %>
            </td>
          </tr>
        <% end %>
      </tbody>
    </table>
  <% end %>


<% rescue => error %>
  <%= erb :error, locals: { error: error }, layout: false %>
<% end %>
